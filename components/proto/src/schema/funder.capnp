@0xe7603b9ac00e2251;

using import "common.capnp".Signature;
using import "common.capnp".PublicKey;
using import "common.capnp".RandValue;
using import "common.capnp".InvoiceId;
using import "common.capnp".Uid;
using import "common.capnp".CustomUInt128;
using import "common.capnp".CustomInt128;
using import "common.capnp".RelayAddress;
using import "common.capnp".HashedLock;
using import "common.capnp".PlainLock;
using import "common.capnp".HashResult;


# Token channel messages
# ----------------------

struct MoveToken {
        operations @0: List(FriendTcOp);
        # Ordered batched operations for this move token.
        # First operation should be applied first.
        optLocalRelays: union {
                empty @1: Void;
                relays @2: List(RelayAddress);
        }
        infoHash @3: HashResult;
        # Current information about the channel that both sides implicitly agree upon.
        oldToken @4: Signature;
        # Token of the previous move token. This is a proof that we have
        # received the previous message before sending this one.
        randNonce @5: RandValue;
        # A random nonce, generated by the sender. We have it because the
        # sender is signing over this message, and we don't want him to be
        # tricked into signing over something strange.
        newToken @6 : Signature;
        # A signature over all the previous fields.
}

struct MoveTokenRequest {
        moveToken @0: MoveToken;
        tokenWanted @1: Bool;
}

struct ResetTerms {
        resetToken @0: Signature;
        inconsistencyCounter @1: UInt64;
        balanceForReset @2: CustomInt128;
}


# A messages sent between friends.
struct FriendMessage {
        union {
                moveTokenRequest @0: MoveTokenRequest;
                inconsistencyError @1: ResetTerms;
        }
}




# Token Operations
# ------------------

# Set the maximum possible debt for the remote party.
# Note: It is not possible to set a maximum debt smaller than the current debt
# This will cause an inconsistency.
# struct SetRemoteMaxDebtOp {
#         remoteMaxDebt @0: CustomUInt128;
# }

struct FriendsRoute {
        publicKeys @0: List(PublicKey);
        # A list of public keys
}

# A custom type for a rational 128 bit number.
struct Ratio128 {
        union {
                one @0: Void;
                numerator @1: CustomUInt128;
        }
}


struct RequestSendFundsOp {
        requestId @0: Uid;
        # Id number of this request. Used to identify the whole transaction
        # over this route.
        srcHashedLock @1: HashedLock;
        # A hash lock created by the originator of this request
        route @2: FriendsRoute;
        destPayment @3: CustomUInt128;
        totalDestPayment @4: CustomUInt128;
        invoiceId @5: InvoiceId;
        # Id number of the invoice we are attempting to pay
        leftFees @6: CustomUInt128;
        # Amount of fees left to give to mediators
        # Every mediator takes the amount of fees he wants and subtracts this
        # value accordingly.
}

struct ResponseSendFundsOp {
        requestId @0: Uid;
        destHashedLock @1: HashedLock;
        randNonce @2: RandValue;
        signature @3: Signature;
        # Signature{key=destinationKey}(
        #   sha512/256("FUNDS_RESPONSE") ||
        #   sha512/256(requestId || randNonce) ||
        #   srcHashedLock ||
        #   destHashedLock ||
        #   destPayment ||
        #   totalDestPayment ||
        #   invoiceId
        # )
        #
        # Note that the signature contains an inner blob (requestId || ...).
        # This was done to make the size of the receipt shorter, as previously
        # this contained a full route.
}

struct CancelSendFundsOp {
        requestId @0: Uid;
}

struct CollectSendFundsOp {
        requestId @0: Uid;
        srcPlainLock @1: PlainLock;
        destPlainLock @2: PlainLock;
}


struct FriendTcOp {
        union {
                enableRequests @0: Void;
                disableRequests @1: Void;
                setRemoteMaxDebt @2: CustomUInt128;
                requestSendFunds @3: RequestSendFundsOp;
                responseSendFunds @4: ResponseSendFundsOp;
                cancelSendFunds @5: CancelSendFundsOp;
                collectSendFunds @6: CollectSendFundsOp;
        }
}
